name: Acceptance Test

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      image-name:
        required: true
        type: string
      image-tag:
        required: false
        type: string
        default: 'latest'

jobs:
  test-action:
    name: Example Action
    runs-on: ubuntu-latest
    env:
      # The hostname should match the MySQL / MariaDB
      # service name defined below
      DB_HOST: mysql
      DB_NAME: wordpress
      DB_USER: username
      DB_PASSWORD: password
    services:
      mysql:
        image: mariadb:12
        env:
          MARIADB_RANDOM_ROOT_PASSWORD: 'yes'
          MARIADB_DATABASE: ${{ env.DB_NAME }}
          MARIADB_USER: ${{ env.DB_USER }}
          MARIADB_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 3306:3306
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Chrome for webdriver-based testing
        uses: browser-actions/setup-chrome@v2

      - name: Setup Chrome Driver for webdriver-based testing
        uses: nanasess/setup-chromedriver@v2

      - name: Test My Plugin
        uses: ./
        with:
          registry: ${{ inputs.registry }}
          image-name: ${{ inputs.image-name }}
          image-tag: ${{ inputs.image-tag }}
          network: ${{ job.services.mysql.network }}
          plugins: ./example/myplugin
          db-host: ${{ env.DB_HOST }}
          db-name: ${{ env.DB_NAME }}
          db-user: ${{ env.DB_USER }}
          db-password: ${{ env.DB_PASSWORD }}
          test-command: |
            # Test variable access
            echo "WORDPRESS_CI_URL ${WORDPRESS_CI_URL}"

            # Running "server-side" commands in the Wordpress CI container
            echo "Current directory: $(wpci-cmd pwd)"
            wpci-cmd ls -la
            wpci-cmd ls -la plugins
            wpci-cmd ls -la plugins/myplugin
            wpci-cmd wp plugin list
            wpci-cmd wp plugin activate myplugin

            # Running "client-side" commands in GitHub Actions runner
            composer install
            composer run test
          test-command-context: ./example/myplugin

      - name: Test My Theme
        uses: ./
        with:
          registry: ${{ inputs.registry }}
          image-name: ${{ inputs.image-name }}
          image-tag: ${{ inputs.image-tag }}
          network: ${{ job.services.mysql.network }}
          db-host: ${{ env.DB_HOST }}
          db-name: ${{ env.DB_NAME }}
          db-user: ${{ env.DB_USER }}
          db-password: ${{ env.DB_PASSWORD }}
          themes: ./example/mytheme
          test-command: |
            # Test variable access
            echo "WORDPRESS_CI_URL ${WORDPRESS_CI_URL}"

            # Running "server-side" commands in the Wordpress CI container
            echo "Current directory: $(wpci-cmd pwd)"
            wpci-cmd ls -la
            wpci-cmd wp theme activate mytheme

            # Running "client-side" commands in GitHub Actions runner
            composer install
            composer run test
          test-command-context: ./example/mytheme

      - name: Combined Test
        uses: ./
        with:
          registry: ${{ inputs.registry }}
          image-name: ${{ inputs.image-name }}
          image-tag: ${{ inputs.image-tag }}
          network: ${{ job.services.mysql.network }}
          db-host: ${{ env.DB_HOST }}
          db-name: ${{ env.DB_NAME }}
          db-user: ${{ env.DB_USER }}
          db-password: ${{ env.DB_PASSWORD }}
          plugins: ./example/myplugin
          themes: ./example/mytheme
          test-command: |
            # Test variable access
            echo "WORDPRESS_CI_URL ${WORDPRESS_CI_URL}"

            # Running "server-side" commands in the Wordpress CI container
            echo "Current directory: $(wpci-cmd pwd)"
            wpci-cmd ls -la
            wpci-cmd wp plugin activate myplugin
            wpci-cmd wp theme activate mytheme

            # Running "client-side" commands in GitHub Actions runner
            composer install
            composer run test
          test-command-context: ./example/combined_test
